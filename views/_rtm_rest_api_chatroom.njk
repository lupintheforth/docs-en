## Chat Rooms

### Create Chat Rooms

In `_Conversation` table , the default ACL permission requires master key to create.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"name":"My First Chatroom"}' \
  https://{{host}}/1.2/rtm/chatrooms
```
The fields in the request are specified in [Conversation](realtime.html#Conversation).

It returns:
```
{"objectId"=>"5a5d7432c3422b31ed845e75", "createdAt"=>"2018-01-16T03:40:32.814Z"}
```

### Query the Chat Rooms

In `_Conversation` table , the default ACL permission requires master key to create.

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'where={"name": "chatroom"}' \
  --data-urlencode 'skip=1' \
  --data-urlencode 'limit=20' \
  https://{{host}}/1.2/rtm/chatrooms
```

Parameters | Optionality | Description
---|---|--- 
skip | Optional | 
limit | Optional | together with skip for pagination
where | Optional | refer to [Leanstorage - Query](rest_api.html#Queries).

It returns:
```
{"results"=>[{"name"=>"My First Chatroom", "createdAt"=>"2018-01-17T04:15:33.386Z", "updatedAt"=>"2018-01-17T04:15:33.386Z", "objectId"=>"5a5ecde6c3422b738c8779d7"}]}
```

### Update Chatrooms

In `_Conversation` table the default ACL permission requires master key to update.

```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"name":"Updated Chatroom"}' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}
```

It returns:
```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

### Delete Chatrooms

In `_Conversation` table the default ACL permission requires master key to update.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}
```

It returns:
```
{}
```

### Get the Online Users Randomly

This interface requires master key.
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/members
```

It returns:
```
{"result": ["clientid1", "clientid2", "clientid3"]}
```

### Query the count of online users

This interface requires master key.
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/members/online-count
```

It returns:
```
{"result": 3}
```

### Chatrooms-send messages

This interface requires master key.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"from_client": "", "message": ""}' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/messages
```
**Warning**, due to the management nature of the interface. When you send meesages via this interface, we will not check whether **from_client**  has the permission to message in the conversation. All the requests will be approved. PLEASE BE CAUTIOUS TO USE THIS INTERFACE.
If you used the [Rich Media format](./realtime_v2.html#Message), when sending messages **message** field has some required format, [Rich Media format guide](./realtime_rest_api.html#Rich Media format guide) has the details. In addition, chatroom **does not support** synchronously send messages to these online **from_client**.

Parameters | Optionality | Description
---|---|---
from_client | required | client Id of Sender
message | required | message content (The type of the content should be string, but we have no constraint on the inner format.<br/> Theoretically, developer can send any format with size smaller than 5MB. )
transient | optional | whether the message is transient, default on FALSE
no_sync | optional | message will get synchronized to the online from_client users, ban this via setting it to TRUE.
push_data | optional | set the offline push content of this message as attachment. If receiver is an iOS device and offline, we will push offline content according to this parameter. Refer to [offline push notification](./realtime-guide-intermediate.html#offline Push Notification)
priority | optional | set priority of the message in [high,normal,low]. The parameter is not case-sensitive and default on HIGH. This parameter only works on transient and Chat Rooms messages. Messages are in queue given it has high priority but the connection is blocked.
mention_all| optional | boolean type, remind all the participants to have an eye on this message.
mention_client_ids | optional | array type, tag the participants who need have eyes. No more than 20 client Ids.

By default , the message API is asynchronous. The Message id and timestamp on Server when received  will get returned. For example: `{"msg-id":"qNkRkFWOeSqP65S9fDyHJw", "timestamp":1495431811151}`.

Frequency limit:

this interface has frequency limitation , click [here](#interface requests frequency limitation) to view.

### Query History Messages

This interface requires master key.
To ensure the encapsulation of the chat History, you can use the signature authentication, refer to [Security and Signature](realtime-guide-senior.html#Security and Signature).
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/messages
```

Parameters | Optionality | Description
--- | --- | ---
msgid | Optional | initial message id for query，**It is required to add timestamp as the startpoint of query**
timestamp | Optional | timestamp at start of the query. Default on current time (on millisecond).
till_msgid | Optional | final message id for query **It is required to add till_timestamp as the end of query**
till_timestamp | Optional | timestamp at end of the query. Default on 0e (on millisecond).
include_start | Optional | whether timestamp and msgid are included in start message, boolean, default on false.
include_stop | Optional | whether till_timestamp and till_msgid are included in end message, boolean, default on false.
reversed | Optional | return results on the reversed order (on descending time series by default), till_timestamp is the current timestamp, timestamp default on 0. Boolean. False by default.
limit | Optional | number limit on return, default on 100, maximum 1000.
client_id | Optional | viewer id（signature parameter）
nonce | Optional | signature random string（signature parameter）
signature_ts | Optional | signature timestamp（signature parameter），unit on milliseconnd
signature | Optional | signature（signature parameter）

This interface has many time parameters. Here we get an instance for your reference. For instance, id1,id2,id3 and the timestamp t1,t2,t3 (t1 < t2 < t3), the different queried result are as follows (blank fields indicate default value):

| timestamp| msgid| till_timestamp| till_msgid| include_start| include_stop| reversed| result |
| ---------|---------|---------|---------|---------|---------|---------|--------- |
| t3| id3| t1| id1| | | | id2 |
| t3| id3| t1| id1| true| | | id3 id2 |
| t3| id3| t1| id1| | true| | id2 id1 |
| t1| id1| t3| id3| | | true| id2 |
| t1| id1| t3| id3| true| | true| id1 id2 |
| t1| id1| t3| id3| | true| true| id2 id3 |

return format, JSON array, sorted on descending timestamp by default, set `reversed` as true to return on reversed order.

return:

```json
[
  {
    "timestamp": 1408008498571,
    "conv-id":   "219946ef32e40c515d33ae6975a5c593",
    "data":      "Nice weather today!",
    "from":      "u111872755_9d0461adf9c267ae263b3742c60fa",
    "msg-id":    "vdkGm4dtRNmhQ5gqUTFBiA",
    "is-conv":   true,
    "is-room":   false,
    "to":        "5541c02ce4b0f83f4d44414e",
    "bin":       false,
    "from-ip":   "202.117.15.217"
  },
  ...
]
```

### Chatrooms-Modify the Messages

This interface requires the master key.
From Objective-C SDK v6.0.0、Android SDK v4.4.0、JavaScript SDK v3.5.0 ，we support the new function of modification and recall. After modification and recall, the cached messages on client terminals will get altered. For the old version，only the messages on server will get altered but not the cached client messages.
```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"from_client": "", "message": "", "timestamp": 123}' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/messages/{message_id}
```

Parameters | Optionality | Description
---|---|---
from_client | required | sender client ID
message | required | content
timestamp | required | message timestamp

return:
```
{"result": {}}
```

Frequency limit:

This interface has frequency limit, click [here](#Interface Requests Frequency limit) for details.

### Chatrooms - Recall the Messages

This interface requries master key. It should be used in combination with matching SDK. See [Modify Messages](#Modify Messages) interface.

```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"from_client": "", "timestamp": 123}' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/messages/{message_id}/recall
```

Parameters | Optionality | Description
---|---|---
from_client | required | sender Client ID
timestamp | required | timestamp of the message

return:
```
{"result": {}}
```

Frequency limit:

This interface has frequency limit, click [here](#Interface Requests Frequency limit) for details.

### Delete Messages 

This interface requires master key.
```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'from_client=some-client-id' \
  --data-urlencode 'timestamp=123' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/messages/{message_id}
```
> NOTE: this interface will delete the messages on the Server , it does no effect on the client terminal

Parameters | Optionality | Description
---|---|---
from_client | required | sender client ID
timestamp | requried | message timestamp

return:
```
{}
```

### Add Temporary Prohibited user 

This interface requires master key.
```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_id": "some-client-id", "ttl": 50}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/temporary-silenceds
```
Parameters | Description
---|---
client_id | prohibited Client ID, string
ttl | prohibited time, seconds , 24h at maximum

It returns:

```
{}
```
### Remove Temporary prohibited user

This interface requires master key.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'client_id=some-client-id' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/temporary-silenceds
```

return 

```
{}
```
 
### Conversation Authority

Refer to [Authority management and Block List](realtime-guide-senior.html#Authority management and block List)

#### Add Authority

This interface requires master key.
Each chatroom is permitted to add 10,000 permanent prohibited users.
```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"clientId": "client", "role": "role"}' \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/member-infos
```

Parameters | Description
---|---
clientId | user ID, string
role | role, Enum[Member,Manager,Owner]

It returns:
```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

#### Delete Authority

This interface requires master key.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/member-infos/{info-id}
```

Parameters | Description
---|---
info-id | the matched objectId

It returns:
```
{}
```

#### Update Authority

This interface requires master key.

```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"clientId": "client", "role": "role"}' \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/member-infos/{info-id}
```

Parameters | Description
---|---
clientId | user ID, string
role | role , Enum[Member,Manager,Owner]
info-id | the matched objectId 

It returns:
```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

#### Query Authority

This interface requires master key.

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'skip=1' \
  --data-urlencode 'limit=20' \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/member-infos
```

Parameters | Description
---|---
skip |
limit | together with skip to implement pagination
role | the role included in the query

It returns:
```
{"results": [{"clientId"=>"client1", "objectId"=>"5a5d7433c3422b31ed845e76", "role": "Manager"}]}
```

#### Add permanent prohibited users

This interface requires master key.
Each chatroom is permitted to add 10,000 permanent prohibited users.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/permanent-silenceds
```

Parameters | Description
--- | ---
client_ids | the prohibited Client ID list , array

It returns:

```
{}
```

#### Remove permanent prohibited user

This interface requires master key.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/permanent-silenceds
```

It returns:

```
{}
```

#### Query the permanent prohibited List

This interface requires master key

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'limit=20' \
  https://{{host}}/1.2/rtm/chatrooms/{conv_id}/permanent-silenceds
```

Parameters | Optionality | Description
---|---|---
limit | Optional | together with next to implement pagination, default on 10
next | Optional | returned on the first query, and the following query will use this parameter to implement pagination

It returns: 

```
{"client_ids": ["client1", "client2"]}
```

### Blocked List

Refer to [Blocked List](realtime-guide-senior.html#Blocked List)

#### Add chatroom Blocked List

This interface requires master key.

The blocked user will get removed from the conversation and prohibited from joining in. Each chatroom can have 10,000 blocked users at most.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/blacklists
```

Parameters | Description
--- | ---
client_ids | blocked Client ID list, array

It returns:

```
{}
```

#### Remove chatroom Blocked List

This interface requires master key.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/chatrooms/{chatroom_id}/blacklists
```

It returns:

```
{}
```

#### Query the Blocked List

This interface requires master key.

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/blacklists
```

Parameters | Optionality | Description
---|---|---
limit | Optional | length of the returned list, together with next to implement pagination , default on 10
next | Optional | returned on the first query, and the following query will use this parameter to implement pagination

It returns:

```
{"client_ids": ["client1", "client2"]}
```

