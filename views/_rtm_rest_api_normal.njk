## One-on-One Chatting/Group Chats

### Create Conversation

In table `_Conversation`, the default ACL permission requires master key to create.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"name":"My First Conversation", "m": ["BillGates", "SteveJobs"], "unique": true}' \
  https://{{host}}/1.2/rtm/conversations
```

The above instance will create an basic conversation, including two initial participants having client ID 'BillGates' and 'SteveJobs'. A success creation will return the objectId. Namely , the conversation ID. The client side can send message with this code. The created conversations can be queried from table `_Conversation`. Fields in conversations can refer to the [Conversation](realtime_v2.html#Conversation) in LeanMessage guide. Passing `"unique": true` will ensure the uniqueness of the conversation.rtm

It returns:
```
{"objectId"=>"5a5d7432c3422b31ed845e75", "createdAt"=>"2018-01-16T03:40:32.814Z"}
```

The only distinction between One-on-One Chatting and Group Chats is the number of the clients. The two share the same API.

### Query Conversation(s)

In table `_Conversation`, the default ACL permission requires master key to query.

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'where={"name": "first conversation"}' \
  --data-urlencode 'skip=1' \
  --data-urlencode 'limit=20' \
  https://{{host}}/1.2/rtm/conversations
```

Parameters | Optionality | Description
---|---|---
skip |optional |
limit | optional | together with 'skip' to implement paging
where | optional | see [Leanstorage - Query](rest_api.html#Query).


It returns:
```
{"results"=>[{"name"=>"test conv1", "m"=>["tom", "jerry"], "createdAt"=>"2018-01-17T04:15:33.386Z", "updatedAt"=>"2018-01-17T04:15:33.386Z", "objectId"=>"5a5ecde6c3422b738c8779d7"}]}
```

### Update Conversation(s)

In table `_Conversation`, the default ACL permission requires master key to mutate.

```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"name":"Updated Conversation"}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}
```

`_Conversation` table can get updated via this interface except the m field.

It returns:
```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

### Delete Conversation(s)

In table `_Conversation`, the default ACL permission requires master key to mutate.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/conversations/{conv_id}
```

It returns:
```
{}
```

### Add User(s)

In table `_Conversation`, the default ACL permission requires master key to mutate.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["Tom", "Jerry"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/members
```


```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

### Remove User(s)

In table `_Conversation`, the default ACL permission requires master key to mutate.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["Tom", "Jerry"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/members
```

It returns:
```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

### Query User(s)

In table `_Conversation`, the default ACL permission requires master key to access.

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/members
```

It returns:

```
{"result": ["client1","client2"]}
```

### Add mute User(s)

In table `_Conversation`, the default ACL permission requires master key to access.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["Tom", "Jerry"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/mutes
```

It returns:

```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

### Query the mute User(s)

In table `_Conversation`, the default ACL permission requires master key to access.

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/mutes
```

It returns:

```
{"result": ["client1", "client2"]}
```

### One-on-One Chatting/Group Chats-send messages

This interface requires master key.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"from_client": "", "message": ""}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/messages
```

**Warning**,since this is an management interface, when you send mesages via this interface, we will not check whether **from_client**  has the permission to message in the conversation. All the requests will be approved. PLEASE BE CAUTIOUS TO USE THIS INTERFACE.
If you use the [Rich Media format](./realtime_v2.html#Message), the sending message's **message** field has some required format. [Rich Media format guide](./realtime_rest_api.html#Rich Media format guide) has the details.

Parameters | Optionality | Description
---|---|---
from_client | required | client Id of Sender
message | required | message content (The type of the content should be string, but we have no constraint on the inner format.<br/> Theoretically, developer can send any format with size smaller than 5MB. )
transient | optional | whether the message is transient, default to FALSE
no_sync | optional | message will get synchronized to the online from_client users, setting this via setting it to TRUE.
push_data | optional | set the offline push content of this message as attachment. If receiver is an iOS device and offline, we will push offline content according to this paramter. Refer to [offline push notification](./realtime-guide-intermediate.html#offline Push Notification)
priority | optional | set priority of the message in [high,normal,low]. The parameter is not case-sensitive and default to HIGH. This parameter only works on transient and Chat Rooms messages. High priority messages may still be queued if the connection between server side and client side is blocked.
mention_all| optional | boolean type, remind all the participants to have an eye on this message.
mention_client_ids | optional | array type, tag the participants who need have eyes. No more than 20 client Ids.

It returns: 

By default , the message API is asynchronous. The Message id and the received timestamp on the server side  will get returned. For example: `{"msg-id":"qNkRkFWOeSqP65S9fDyHJw", "timestamp":1495431811151}`.

Frequency limit:

this interface has frequency limitation , click [here](#interface requests frequency limitation) to view.

### Query History Messages

This interface requires master key.
To ensure the security of the chat History, you can use the signature authentication, refer to [Security and Signature](realtime-guide-senior.html#Security and Signature).
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/messages
```

Parameters | Optionality | Description
--- | --- | ---
msgid | Optional | initial message id for query, **It is required to add timestamp as the startpoint of query**
timestamp | Optional | timestamp at start of the query. Default on current time (on millisecond).
till_msgid | Optional | final message id for query. **It is required to add till_timestamp as the end of query**
till_timestamp | Optional | timestamp at end of the query. Default to 0(on millisecond).
include_start | Optional | whether timestamp and msgid are included in start message, boolean, default to false.
include_stop | Optional | whether till_timestamp and till_msgid are included in end message, boolean, default to false.
reversed | Optional | return results on the reversed order (on descending time series by default), till_timestamp is the current timestamp, timestamp default to 0. Boolean. False by default.
limit | Optional | number limit on return, default to 100, maximum 1000.
client_id | Optional | viewer id (signature parameter)
nonce | Optional | signature random string (signature parameter)
signature_ts | Optional | signature timestamp (signature parameter)ï¼Œunit on millisecond
signature | Optional | signature (signature parameter)

This interface has many time parameters. Here we have an example reference. For instance, there are three messages (id1, id2, id3) in one conversation, with timestamp t1, t2, t3 respectively (t1 < t2 < t3), the different queried result are as follows (blank fields indicate default value)for your:

| timestamp| msgid| till_timestamp| till_msgid| include_start| include_stop| reversed| result |
| ---------|---------|---------|---------|---------|---------|---------|--------- |
| t3| id3| t1| id1| | | | id2 |
| t3| id3| t1| id1| true| | | id3 id2 |
| t3| id3| t1| id1| | true| | id2 id1 |
| t1| id1| t3| id3| | | true| id2 |
| t1| id1| t3| id3| true| | true| id1 id2 |
| t1| id1| t3| id3| | true| true| id2 id3 |

It returns a JSON array, sorted on descending timestamp by default, set `reversed` as true to return on reversed order.

It returns:

```json
[
  {
    "timestamp": 1408008498571,
    "conv-id":   "219946ef32e40c515d33ae6975a5c593",
    "data":      "Nice weather today!",
    "from":      "u111872755_9d0461adf9c267ae263b3742c60fa",
    "msg-id":    "vdkGm4dtRNmhQ5gqUTFBiA",
    "is-conv":   true,
    "is-room":   false,
    "to":        "5541c02ce4b0f83f4d44414e",
    "bin":       false,
    "from-ip":   "202.117.15.217"
  },
  ...
]
```

### One-on-One Chatting/Group Chats - Modify the Messages

This interface requires the master key.
We support the new function of modification and recall. After modification and recall, the cached messages on client terminals will get altered. For the old versionï¼Œonly the messages on server will get altered but not the cached client messages.
```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"from_client": "", "message": "", "timestamp": 123}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/messages/{message_id}
```

Parameters | Optionality | Description
---|---|---
from_client | required | sender client ID
message | required | content
timestamp | required | message timestamp

It returns:
```
{"result": {}}
```

Frequency limit:

This interface has frequency limit, click [here](#Interface Requests Frequency limit) for details.

### One-on-One Chatting/Group Chats - Recall the Messages

This interface requries master key. It should be used in combination with matching SDK. See [Modify Messages](#Modify Messages) interface.

```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"from_client": "", "timestamp": 123}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/messages/{message_id}/recall
```

Parameters | Optionality | Description
---|---|---
from_client | required | sender Client ID
timestamp | required | timestamp of the message

It returns:
```
{"result": {}}
```

Frequency limit:

This interface has frequency limit, click [here](#Interface Requests Frequency limit) for details.

### Delete Messages 

This interface requires master key.

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'from_client=some-client-id' \
  --data-urlencode 'timestamp=123' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/messages/{message_id}
```

> NOTE: this interface will delete the messages on the server. It does no effect on the client terminal

Parameters | Optionality | Description
---|---|---
from_client | required | sender client ID
timestamp | requried | message timestamp

It returns:
```
{}
```

### Add Temporary Prohibited user 

This interface requires master key.
```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_id": "some-client-id", "ttl": 50}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/temporary-silenceds
```

Parameters | Description
---|---
client_id | muted Client ID, string
ttl | muted time, seconds, 24h at maximum

It returns:

```
{}
```

### Remove Temporary muted user

This interface requires master key.
```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'client_id=some-client-id' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/temporary-silenceds
```

It returns:

```
{}
```

### Conversation Permission

Refer to [Permission management and Block List](realtime-guide-senior.html#Permission management and block List)

#### Add Permission

This interface requires master key.
Each conversation is permitted to add 500 permanent muted users.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"clientId": "client", "role": "role"}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/member-infos
```

Parameters | Description
---|---
clientId | user ID, string
role | role, Enum[Member,Manager,Owner]

It returns:
```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

#### Delete Permission

This interface requries master key.
```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/member-infos/{info-id}
```

Parameters | Description
---|---
info-id | the matched objectId

It returns:
```
{}
```

#### Update Permission

This interface requires master key
```sh
curl -X PUT \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"clientId": "client", "role": "role"}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/member-infos/{info-id}
```

Parameters | Description
---|---
clientId | user ID, string
role | role , Enum[Member,Manager,Owner]
info-id | the matched objectId 

It returns:
```
{"updatedAt"=>"2018-01-16T03:40:37.683Z", "objectId"=>"5a5d7433c3422b31ed845e76"}
```

#### Query Permission

This interface requires master key.
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'skip=1' \
  --data-urlencode 'limit=20' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/member-infos
```

Parameters | Description
---|---
skip |
limit | together with skip to implement pagination
role | the role included in the query

It returns:
```
{"results": [{"clientId"=>"client1", "objectId"=>"5a5d7433c3422b31ed845e76", "role": "Manager"}]}
```

#### Add permanent muted user

This interface requires master key.
Each conversation is permitted to add 500 permanent muted users.
```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/permanent-silenceds
```

Parameters | Description
--- | ---
client_ids | the muted Client ID list , array

It returns:

```
{}
```

#### Remove permanent muted user

This interface requires master key
```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/permanent-silenceds
```

It returns:

```
{}
```

#### Query the permanent muted List

This interface requires master key
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'limit=20' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/permanent-silenceds
```

Parameters | Optionality | Description
---|---|---
limit | Optional | length of returned list,  together with next to implement pagination, default to 10
next | Optional | returned on the first query, and the following query will use this parameter to implement pagination

It returns: 

```
{"client_ids": ["client1", "client2"]}
```

### Blocked List

Refer to [Blocked List](realtime-guide-senior.html#Blocked List)

#### Add users to conversation Blocked List 

This interface requires master key.

The blocked user will get removed from the conversation and muted from joining in. Each conversation can have 500 blocked users at most.
```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/blacklists
```

Parameters | Description
--- | ---
client_ids | blocked Client ID list, array

It returns:

```
{}
```

#### Query the Blocked List

This interface requires master key.
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -d '{"client_ids": ["client1", "client2"]}' \
  https://{{host}}/1.2/rtm/conversations/{conv_id}/blacklists
```

Parameters | Optionality | Description
---|---|---
limit | Optional | together with next to implement pagination , default to 10
next | Optional | returned on the first query, and the following query will use this parameter to implement pagination

It returns:

```
{"client_ids": ["client1", "client2"]}
```











