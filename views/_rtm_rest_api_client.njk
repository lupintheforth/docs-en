## User


### Query the Online User

This interface requires master key.
```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"client_ids": ["Tom", "Jerry"]}' \
  https://{{host}}/1.2/rtm/clients/check-online
```

Parameters | Optionality | Description
---|---|---
client_ids | required | clients to query, at most 20

It returns:

```
{"results":["client1"]}
```

### Query Count of Unread Messages

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{appkey}}" \
  -G \
  --data-urlencode 'conv_id=...' \
  https://{{host}}/1.2/rtm/clients/{client_id}/unread-count
```

Parameters | Optionality | Description
---|---|---
conv_id | optional | conversation ID, if not specified, query all the unread message by the client in all the conversations.

It returns: 

```
{"count":1}
```

### Force Offline 

This interface requires master key.
```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"reason": "why"}' \
  https://{{host}}/1.2/rtm/clients/{client_id}/kick
```

Parameters | Optionality | Description
---|---|---
reason | optional | offline reason, string type , no more than 20 characters.

It returns: 

```
{}
```

### Query the subscribed Official Account 

This interface requires master key.
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -G \
  --data-urlencode 'conv_id=...' \
  --data-urlencode 'timestamp=...' \
  --data-urlencode 'limit=...' \
  --data-urlencode 'direction=...' \
  https://{{host}}/1.2/rtm/clients/{client_id}/service-conversations
```

Parameters | Optionality | Type | Description
---|---|---|---
conv_id | optional | string | Official account ID at the start of the query. The query will start to traverse at the beginning of the subscription list if left blank. The result will not include the start ID.
timestamp | optional | integer | query the timestamp of the subscription. If you have specified the conv_id parameter, you must also specify this parameter and its value should match the time of the conversation specified by conv_id. Its unit is millisecond.
limit | optional | integer | return number limit, default on 50.
direction | optional | string | sort the result on time order, old indicates descending , new indicates ascending. The parameter is default on new. old will It returns: the latest subscribed conversation while new will It returns: the oldest conversation subscribed.

It returns: the subscribed system conversations list:

```
[{"timestamp":1482994126561,"subscriber":"XXX","conv_id":"convId1"},
 {"timestamp":1491467945277,"subscriber":"XXX","conv_id":"convId2"}, ...]
```

`timestamp` is the subscribed time by the user, `subscriber` is the subscriber client id. If the query is not exhaustive,  the last Official Account ID and subscription time should be retrieved as new conv_id and timestamp parameters for the next query.

### Query the history messages

This interface requires master key.

Invoke this interface can query messages sent by specified client_id in One-on-One Chatting/Group Chats and Chatrooms.
```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/clients/{client_id}/messages
```

For parameters and the returned value refer to [One-on-One Chatting/Group Chats query the history messages](realtime_rest_api.html#Query history messages) interface.

### Add Blocked List 

This interface requires master key.

One client is permitted to add one group chat/ chatroom / Official Account to the Blocked list. Then this client cannot be added to these blocked conversations by other clients.
Currently one client cannot add another client into the Blocked List.

```sh
curl -X POST \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"conv_id": ""}' \
  https://{{host}}/1.2/rtm/clients/{client_id}/blacklists
```

Parameters | Optionality | Description
---|---|---
conv_id | required | blocked Group chats/chatroom/Official Account ID

It returns:
```
{}
```

### Remove from Blocked List

```sh
curl -X DELETE \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  -H "Content-Type: application/json" \
  -d '{"conv_id": ""}' \
  https://{{host}}/1.2/rtm/clients/{client_id}/blacklists
```

It returns:
```
{}
```

### Query Blocked List 

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{masterkey}},master" \
  https://{{host}}/1.2/rtm/clients/{client_id}/blacklists
```

Parameters | Optionality | Description
---|---|---
limit | Optional | together with next to implement pagination , default on 10
next | Optional | It returns:ed on the first query, the following query with this parameter to implement pagination

It returns:

```
{"conv_ids"=>["conv1"], "next"=>"1"}
```

### Retrieve sign-in signature

This interface allows app using [AV.User](rest_api.html#Users) implement sign-in authentication quickly. Sign-in authentication is closed by default, go to [Dashboard > Messaging > LeanMessage > Settings > LeanMessage settings](/dashboard/messaging.html?appid={{appid}}#/message/realtime/conf) , tick **Verify signatures for logging in** to enable it.

```sh
curl -X GET \
  -H "X-LC-Id: {{appid}}" \
  -H "X-LC-Key: {{appkey}}" \
  -G \
  --data-urlencode 'session_token=some-token' \
  https://{{host}}/1.2/rtm/clients/sign
```

Parameters | Optionality | Description
---|---|---
session_token | required | sessionToken for AV.User

It returns:

```
{"nonce": "", "timestamp": "", "client_id": "", "signature": ""}
```

To facilitate the fine-grained control for users, realizing functions self-customized (Blocked List), this interface provides a hook function `_rtmClientSign`. This hook will be invoked after verifying the sessionToken, Its parameter is a JSON object of AV.User.
```json
{
    "email": "",
    "sessionToken": "",
    "updatedAt": "",  // format：2017-07-11T07:58:10.149Z
    "phone": "",
    "objectId": "",
    "username": "",
    "createdAt": "",  // format：2017-07-11T07:58:10.149Z
    "emailVerified": true/false,
    "mobilePhoneVerified": true/false
}
```
You may receive two types of results:
```json
{"result": true} // permitted to sign
{"result": false, "error": "error message"}  // rejected to sign
```


